name: Publish

env:
  GIT_FAKE_EMAIL: dt-dds@daimlertruck.com
  GIT_FAKE_USER: dt-dds

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  gather-changed-packages:
    if: "contains(github.event.head_commit.message, 'release:') || github.event_name == 'workflow_dispatch'"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter-unpublished-packages.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2

      - name: Setup node
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install yarn and turbo
        shell: bash
        run: |
          npm install -g yarn
          npm install turbo@^2.0.6 --global

      - name: Get changed packages
        id: get-changed-packages
        run: |
          if [[ "${{ github.event_name }}" != 'workflow_dispatch' ]]; then
            TURBO_TELEMETRY_MESSAGE_DISABLED=1 npx -y turbo build --dry-run=json --filter=[HEAD^1] --filter='!./apps/*' > $RUNNER_TEMP/turbo_result.json
          else
            TURBO_TELEMETRY_MESSAGE_DISABLED=1 npx -y turbo build --dry-run=json --filter='!./apps/*' > $RUNNER_TEMP/turbo_result.json
          fi
          echo "Turbo build output saved to $RUNNER_TEMP/turbo_result.json"

      - name: Filter unpublished @dt-dds packages on npmjs
        id: filter-unpublished-packages
        run: |
          TURBO_RESULT=$(cat $RUNNER_TEMP/turbo_result.json)
          packages=$(echo "$TURBO_RESULT" | jq -r '.packages[]')

          unpublished_packages=()

          workspace_info=$(yarn workspaces --json info)
          parsed_workspace_info=$(echo "$workspace_info" | jq -r '.data | fromjson')

          for package in $packages; do
            # Only consider @dt-dds scoped packages (skip others)
            if [[ "$package" != @dt-dds/* ]]; then
              echo "Skipping non-@dt-dds package: $package"
              continue
            fi

            echo "Checking package: $package"
            directory=$(echo "$parsed_workspace_info" | jq -r --arg package "$package" '.[$package].location')

            if [[ ! -d "$directory" ]]; then
              echo "Directory does not exist for package $package: $directory"
              continue
            fi

            current_version=$(jq -r '.version' < "$directory/package.json")
            if [[ "$current_version" == "0.0.0" ]]; then
              echo "Skipping $package as its version is 0.0.0"
              continue
            fi

            # Query public npmjs for existing versions
            published_versions=$(npm view "$package" versions --json 2>/dev/null || echo "[]")
            if ! echo "$published_versions" | jq empty >/dev/null 2>&1; then
              published_versions="[]"
            fi

            if ! echo "$published_versions" | grep -q "\"$current_version\""; then
              echo "Version $current_version of $package is not published on npmjs.org"
              unpublished_packages+=("$package")
            else
              echo "$package@$current_version already published on npmjs.org"
            fi
          done

          if [ ${#unpublished_packages[@]} -eq 0 ]; then
            echo "No unpublished packages."
            echo "result=[]" >> $GITHUB_OUTPUT
          else
            echo "Unpublished packages: ${unpublished_packages[@]}"
            result=$(printf '%s\n' "${unpublished_packages[@]}" | jq -R . | jq -s .)
            echo "result<<EOF" >> $GITHUB_OUTPUT
            echo "$result" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  publish:
    runs-on: ubuntu-latest
    needs: [gather-changed-packages]
    strategy:
      matrix:
        packages: ${{ fromJson(needs.gather-changed-packages.outputs.matrix) }}
        exclude:
          - packages: '//'
          - packages: '@dt-dds/docs'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup node and yarn
        uses: './.github/actions/yarn-node-install'
        with:
          CACHE_FILE_NAME: ${{ matrix.packages }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set package directory and version
        id: package-detail
        run: |
          directory=$(yarn workspaces --json info | jq -r '.data' | jq -r '.["${{ matrix.packages }}"].location')
          current_version=$(cat $directory/package.json | jq -r '.version')
          echo "directory=$directory" >> $GITHUB_OUTPUT
          echo "version=$current_version" >> $GITHUB_OUTPUT

      - name: Run build ${{ matrix.packages }}
        run: |
          yarn run turbo build --filter=${{ matrix.packages }}...

      - name: Yarn pack ${{ matrix.packages }}
        run: |
          yarn pack
        working-directory: ${{ steps.package-detail.outputs.directory }}

      - name: Publish to npmjs.org
        run: |
          # Get the package file created by yarn pack
          PACKAGE_NAME=$(jq -r '.name' "${{ steps.package-detail.outputs.directory }}/package.json")
          PACKAGE_VERSION=$(jq -r '.version' "${{ steps.package-detail.outputs.directory }}/package.json")

          # Convert @scope/package-name to scope-package-name for file naming
          PACKAGE_FILE_NAME=$(echo "$PACKAGE_NAME" | sed 's/@//' | sed 's/\//-/')
          PACKAGE_FILE="${PACKAGE_FILE_NAME}-v${PACKAGE_VERSION}.tgz"

          # Publish from root directory
          # with force to handle deleted versions
          # remove flag in ~48h
          npm publish "${{ steps.package-detail.outputs.directory }}/$PACKAGE_FILE" --access public --force
          rm -f "${{ steps.package-detail.outputs.directory }}/$PACKAGE_FILE"

  update-readme:
    runs-on: ubuntu-latest
    needs: [publish]
    if: always() && needs.publish.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup node and yarn
        uses: './.github/actions/yarn-node-install'
        with:
          CACHE_FILE_NAME: readme-update
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update README with package list
        run: |
          node scripts/generate-pkg-list/index.js

      - name: Commit and push changes
        run: |
          git config --global user.email ${{ env.GIT_FAKE_EMAIL }}
          git config --global user.name ${{ env.GIT_FAKE_USER }}
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update pkgs list in README [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
